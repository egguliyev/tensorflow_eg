import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline

from tensorflow.keras.datasets import cifar10

(x_train, y_train),(x_test,y_test) = cifar10.load_data()

x_train = x_train/x_train.max()
x_test = x_test/x_test.max()

from tensorflow.keras.utils import to_categorical

y_cat_train = to_categorical(y_train,10)
y_cat_test = to_categorical(y_test,10)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, MaxPool2D, Flatten

model = Sequential()
model.add(Conv2D(filters=32, kernel_size=(4,4), input_shape=(32,32,3), activation='relu',))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Conv2D(filters=32, kernel_size=(4,4), input_shape=(32,32,3), activation='relu',))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Flatten())
model.add(Dense(256, activation = 'relu'))
model.add(Dense(10,activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam',metrics=['accuracy'])

from tensorflow.keras.callbacks import EarlyStopping
early_stop = EarlyStopping(monitor = 'val_loss', patience=2)
model.fit(x_train,y_cat_train, epochs=15, validation_data=(x_test,y_cat_test), callbacks=[early_stop])

metrics = pd.DataFrame(model.history.history)

metrics[['accuracy', 'val_accuracy']].plot()

metrics[['loss', 'val_loss']].plot()

model.evaluate(x_test,y_cat_test, verbose=0)

from sklearn.metrics import classification_report,confusion_matrix

predicted_classes = model.predict(x_test)
predictions  = np.argmax(predicted_classes, axis=1)

print (classification_report(y_test,predictions))

import seaborn as sns
plt.figure(figsize=(10,10))
sns.heatmap(confusion_matrix(y_test,predictions),annot=True)

my_image = x_test[16]

plt.imshow(my_image)

predicted_classes = model.predict(my_image.reshape(1,32,32,3))
predictions  = np.argmax(predicted_classes, axis=1)

predictions

